#!/usr/bin/env bash
# Secure Windows Cross-Compilation Build Script for AirImpute Pro
# Version 3.0 - With full security hardening and integrity verification
# Generated by Claude with Gemini security review

set -euo pipefail
IFS=$'\n\t'

# Security: Fail on any error and undefined variables
trap 'echo "Error on line $LINENO. Exit code: $?" >&2' ERR

# Configuration with SHA256 checksums
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly BUILD_DIR="${SCRIPT_DIR}/build-windows"
readonly CACHE_DIR="${HOME}/.cache/airimpute-build"
readonly LOG_FILE="${BUILD_DIR}/build-$(date +%Y%m%d-%H%M%S).log"

# Versions and checksums
readonly PYTHON_VERSION="3.11.7"
readonly PYTHON_STANDALONE_VERSION="20240107"
readonly ZIG_VERSION="0.11.0"

# SHA256 checksums for integrity verification
# SHA256 for cpython-3.11.7+20240107-x86_64-pc-windows-msvc-shared-install_only.tar.gz
# From: https://github.com/indygreg/python-build-standalone/releases/tag/20240107
readonly PYTHON_SHA256="67077e6fa918e4f4fd60ba169820b00be7c390c497bf9bc9cab2c255ea8e6f3e"
readonly ZIG_SHA256="2d00e789fec4f71790a6e7bf83ff91d564943c5ee843c5fd966efc474b423047"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*" | tee -a "${LOG_FILE}"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*" | tee -a "${LOG_FILE}" >&2
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*" | tee -a "${LOG_FILE}"
}

# Verify SHA256 checksum
verify_checksum() {
    local file="$1"
    local expected_sha256="$2"
    local actual_sha256
    
    if [[ ! -f "$file" ]]; then
        error "File not found for checksum verification: $file"
    fi
    
    actual_sha256=$(sha256sum "$file" | cut -d' ' -f1)
    
    if [[ "$actual_sha256" != "$expected_sha256" ]]; then
        error "SHA256 mismatch for $file\nExpected: $expected_sha256\nActual: $actual_sha256"
    fi
    
    log "✓ SHA256 verified for $(basename "$file")"
}

# Download with integrity check
download_with_verification() {
    local url="$1"
    local output="$2"
    local sha256="$3"
    
    if [[ -f "$output" ]]; then
        log "File already exists: $output"
        verify_checksum "$output" "$sha256"
        return 0
    fi
    
    log "Downloading: $url"
    curl -L --fail --silent --show-error --output "$output" "$url" || error "Download failed: $url"
    
    verify_checksum "$output" "$sha256"
}

# Setup Python bundle for Windows
setup_python_bundle() {
    log "Setting up Python bundle for Windows..."
    
    local python_dir="${SCRIPT_DIR}/src-tauri/python"
    local python_url="https://github.com/indygreg/python-build-standalone/releases/download/${PYTHON_STANDALONE_VERSION}/cpython-${PYTHON_VERSION}+${PYTHON_STANDALONE_VERSION}-x86_64-pc-windows-msvc-shared-install_only.tar.gz"
    local python_archive="${CACHE_DIR}/python-windows.tar.gz"
    
    mkdir -p "$python_dir" "$CACHE_DIR"
    
    # Download with verification
    download_with_verification "$python_url" "$python_archive" "$PYTHON_SHA256"
    
    # Extract Python bundle
    log "Extracting Python bundle..."
    tar -xzf "$python_archive" -C "$python_dir" --strip-components=1
    
    # Create Python wrapper script
    cat > "${python_dir}/python.bat" << 'EOF'
@echo off
"%~dp0\python.exe" %*
EOF
    
    log "✓ Python bundle setup complete"
}

# Setup Zig for cross-compilation
setup_zig() {
    log "Setting up Zig for cross-compilation..."
    
    local zig_url="https://ziglang.org/download/${ZIG_VERSION}/zig-linux-x86_64-${ZIG_VERSION}.tar.xz"
    local zig_archive="${CACHE_DIR}/zig-${ZIG_VERSION}.tar.xz"
    local zig_dir="${CACHE_DIR}/zig-${ZIG_VERSION}"
    
    mkdir -p "$CACHE_DIR"
    
    # Download with verification
    download_with_verification "$zig_url" "$zig_archive" "$ZIG_SHA256"
    
    # Extract Zig
    if [[ ! -d "$zig_dir" ]]; then
        log "Extracting Zig..."
        mkdir -p "$zig_dir"
        tar -xf "$zig_archive" -C "$zig_dir" --strip-components=1
    fi
    
    # Add to PATH
    export PATH="${zig_dir}:${PATH}"
    
    # Verify installation
    zig version || error "Zig installation verification failed"
    
    log "✓ Zig setup complete"
}

# Configure Rust for secure Windows build
configure_rust() {
    log "Checking Rust configuration..."
    
    # In Docker container, Rust is already configured with the Windows target
    # Just verify it's available
    if ! rustup target list --installed | grep -q x86_64-pc-windows-msvc; then
        error "Windows MSVC target not found. This should be pre-installed in the Docker image."
    fi
    
    # The Docker container already has the environment variables set for Zig
    # No need to copy config files
    
    log "✓ Rust configuration verified"
}

# Check required tools
check_dependencies() {
    log "Checking required dependencies..."
    
    local missing_deps=()
    
    # Check for required commands
    command -v zig >/dev/null 2>&1 || missing_deps+=("zig")
    command -v rustup >/dev/null 2>&1 || missing_deps+=("rustup")
    command -v npm >/dev/null 2>&1 || missing_deps+=("npm")
    command -v makensis >/dev/null 2>&1 || missing_deps+=("nsis (makensis)")
    command -v osslsigncode >/dev/null 2>&1 || warning "osslsigncode not found - code signing will be skipped"
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        error "Missing required dependencies: ${missing_deps[*]}\nPlease install them or use the Docker build environment."
    fi
    
    log "✓ All required dependencies found"
}

# Build frontend
build_frontend() {
    log "Building frontend..."
    
    cd "$SCRIPT_DIR"
    
    # Install dependencies with integrity check
    npm ci --audit-level=moderate || error "npm install failed or found vulnerabilities"
    
    # Run security audit
    npm audit --production --audit-level=moderate || error "npm audit found vulnerabilities. Build failed."
    
    # Build frontend
    npm run build || error "Frontend build failed"
    
    log "✓ Frontend build complete"
}

# Build Tauri application
build_tauri() {
    log "Building Tauri application for Windows..."
    
    cd "${SCRIPT_DIR}/src-tauri"
    
    # Use the Windows-specific Cargo.toml
    if [[ -f "Cargo-windows.toml" ]]; then
        cp Cargo-windows.toml Cargo.toml
        log "Using Windows-specific Cargo.toml"
    fi
    
    # Set environment for cross-compilation
    export CARGO_TARGET_DIR="${BUILD_DIR}/target"
    export TAURI_PRIVATE_KEY="${TAURI_PRIVATE_KEY:-}"
    export TAURI_KEY_PASSWORD="${TAURI_KEY_PASSWORD:-}"
    
    # Build with security flags
    cargo tauri build \
        --target x86_64-pc-windows-msvc \
        --features "custom-protocol" \
        --bundles nsis \
        || error "Tauri build failed"
    
    log "✓ Tauri build complete"
}

# Sign Windows executable (placeholder - requires certificate)
sign_executable() {
    log "Code signing..."
    
    local exe_path="${BUILD_DIR}/target/x86_64-pc-windows-msvc/release/airimpute-pro.exe"
    local signed_exe_path="${exe_path}.signed"
    
    if [[ ! -f "$exe_path" ]]; then
        error "Executable not found: $exe_path"
    fi
    
    if [[ -z "${CODE_SIGNING_CERT_FILE:-}" || -z "${CODE_SIGNING_KEY_FILE:-}" ]]; then
        warning "Code signing secrets not provided. Skipping."
        warning "Set CODE_SIGNING_CERT_FILE and CODE_SIGNING_KEY_FILE to enable."
        return
    fi
    
    log "Signing executable with osslsigncode..."
    osslsigncode sign \
        -certs "${CODE_SIGNING_CERT_FILE}" \
        -key "${CODE_SIGNING_KEY_FILE}" \
        -pass "${CODE_SIGNING_KEY_PASSWORD:-}" \
        -n "AirImpute Pro" \
        -i "https://airimpute.com" \
        -t "http://timestamp.digicert.com" \
        -in "$exe_path" \
        -out "$signed_exe_path" || error "Code signing failed"
    
    mv "$signed_exe_path" "$exe_path"
    log "✓ Code signing complete"
}

# Run security checks
security_checks() {
    log "Running security checks..."
    
    # Check for hardcoded secrets using a more sophisticated approach
    log "Scanning for potential secrets..."
    local secret_patterns=(
        "password.*=.*['\"].*['\"]" 
        "secret.*=.*['\"].*['\"]" 
        "api[_-]?key.*=.*['\"].*['\"]" 
        "token.*=.*['\"].*['\"]" 
        "BEGIN.*PRIVATE KEY"
    )
    
    for pattern in "${secret_patterns[@]}"; do
        if grep -r "$pattern" "${SCRIPT_DIR}/src" --include="*.rs" --include="*.ts" --include="*.tsx" 2>/dev/null | grep -v "// OK:" | grep -v "example" | grep -v "test"; then
            warning "Potential secrets found - review before release"
        fi
    done
    
    # Verify no debug code in release
    log "Checking for debug code..."
    if grep -r "console\\.log\|dbg!\|println!" "${SCRIPT_DIR}/src" --include="*.rs" --include="*.ts" --include="*.tsx" 2>/dev/null | grep -v "// OK:" | grep -v "test"; then
        warning "Debug code found - consider removing before release"
    fi
    
    # Note: Dependency auditing disabled due to tool compatibility issues
    # Run security audits separately with latest Rust version
    warning "Dependency auditing skipped - run 'cargo audit' separately"
    
    log "✓ Security checks complete"
}

# Main build process
main() {
    log "=== AirImpute Pro Secure Windows Build v3.0 ==="
    log "Build started at $(date)"
    
    # Create build directory
    mkdir -p "$BUILD_DIR"
    
    # Check dependencies first
    check_dependencies
    
    # Setup build environment
    setup_zig
    setup_python_bundle
    configure_rust
    
    # Run security checks BEFORE building
    security_checks
    
    # Build application
    build_frontend
    build_tauri
    
    # Post-build steps
    sign_executable
    
    # Report results
    log "=== Build Summary ==="
    log "✓ Build completed successfully"
    log "✓ Output directory: ${BUILD_DIR}/target/x86_64-pc-windows-msvc/release"
    log "✓ Installer: ${BUILD_DIR}/target/x86_64-pc-windows-msvc/release/bundle/nsis/"
    log "✓ Log file: ${LOG_FILE}"
    
    # List generated files
    log "Generated files:"
    find "${BUILD_DIR}/target/x86_64-pc-windows-msvc/release" -type f -name "*.exe" -o -name "*.msi" | while read -r file; do
        log "  - $file ($(du -h "$file" | cut -f1))"
    done
}

# Run main function
main "$@"