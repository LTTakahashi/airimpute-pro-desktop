name: Build Windows EXE

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows-exe:
    name: Build Windows Executable
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'

    - name: Install dependencies
      run: |
        npm ci --no-audit --no-fund

    - name: Build frontend
      run: |
        npm run build:windows
      env:
        NODE_OPTIONS: --max-old-space-size=4096

    - name: Build Tauri Windows app
      run: |
        cd src-tauri
        cargo build --release --target x86_64-pc-windows-msvc
        cd ..
        npm run tauri build -- --target x86_64-pc-windows-msvc
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

    - name: Display build outputs
      run: |
        echo "Build completed. Checking for executables..."
        echo ""
        echo "=== Direct EXE ==="
        if (Test-Path "src-tauri\target\x86_64-pc-windows-msvc\release\airimpute-pro-desktop.exe") {
          $exe = Get-Item "src-tauri\target\x86_64-pc-windows-msvc\release\airimpute-pro-desktop.exe"
          Write-Host "Found: $($exe.Name) - Size: $([math]::Round($exe.Length / 1MB, 2)) MB"
        }
        echo ""
        echo "=== Installer EXE (NSIS) ==="
        Get-ChildItem -Path "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\nsis\" -Filter "*.exe" -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "Found: $($_.Name) - Size: $([math]::Round($_.Length / 1MB, 2)) MB"
        }
        echo ""
        echo "=== MSI Installer ==="
        Get-ChildItem -Path "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\msi\" -Filter "*.msi" -ErrorAction SilentlyContinue | ForEach-Object {
          Write-Host "Found: $($_.Name) - Size: $([math]::Round($_.Length / 1MB, 2)) MB"
        }

    - name: Upload Windows EXE
      uses: actions/upload-artifact@v4
      with:
        name: windows-exe-direct
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/*.exe
        if-no-files-found: warn
        retention-days: 7

    - name: Upload Windows Installers
      uses: actions/upload-artifact@v4
      with:
        name: windows-installers
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
        if-no-files-found: warn
        retention-days: 7

    - name: Create Release (on main branch only)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Build ${{ github.run_number }}
        draft: true
        files: |
          src-tauri/target/x86_64-pc-windows-msvc/release/*.exe
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}