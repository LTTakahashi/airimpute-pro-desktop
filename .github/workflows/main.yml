name: AirImpute Pro - Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Daily validation run at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        type: boolean

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Code Quality and Linting
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            node_modules/
            ~/.pnpm-store/
            ~/.cache/pip/
          key: ${{ runner.os }}-quality-${{ hashFiles('**/Cargo.lock', '**/pnpm-lock.yaml', '**/requirements-exact.txt') }}
      
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pip install -r requirements-dev.txt
          cd src-tauri && cargo fetch
      
      - name: TypeScript type checking
        run: pnpm run type-check
      
      - name: ESLint
        run: pnpm run lint:js
      
      - name: Stylelint
        run: pnpm run lint:css
      
      - name: Rust format check
        run: cd src-tauri && cargo fmt -- --check
      
      - name: Rust clippy
        run: cd src-tauri && cargo clippy -- -D warnings
      
      - name: Python linting (flake8 + black + mypy)
        run: |
          cd scripts
          flake8 . --config=.flake8
          black --check .
          mypy airimpute --config-file mypy.ini
      
      - name: Security audit - npm
        run: pnpm audit --production
      
      - name: Security audit - Rust
        run: |
          cargo install cargo-audit
          cd src-tauri && cargo audit
      
      - name: Security audit - Python
        run: |
          pip install safety
          safety check -r requirements-exact.txt

  # Job 2: Unit and Integration Tests
  test-suite:
    name: Test Suite - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup test environment
        uses: ./.github/actions/setup-test-env
        with:
          os: ${{ matrix.os }}
          node-version: ${{ env.NODE_VERSION }}
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libasound2-dev \
            libnetcdf-dev \
            libhdf5-dev
      
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install netcdf hdf5
      
      - name: Install project dependencies
        run: |
          pnpm install --frozen-lockfile
          pip install -r requirements-dev.txt
          cd src-tauri && cargo build --release
      
      - name: Run frontend tests
        run: pnpm test:frontend -- --coverage
      
      - name: Run Rust tests
        run: |
          cd src-tauri
          cargo test --all-features -- --test-threads=1
          cargo test --doc
      
      - name: Run Python tests
        run: |
          cd scripts
          pytest -v --cov=airimpute --cov-report=xml --cov-report=term-missing
      
      - name: Run integration tests
        run: pnpm test:integration
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ matrix.os }}
          path: |
            coverage/
            scripts/coverage.xml
            src-tauri/tarpaulin-report.xml

  # Job 3: E2E Tests
  e2e-tests:
    name: E2E Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup test environment
        uses: ./.github/actions/setup-test-env
        with:
          os: ubuntu-latest
          node-version: ${{ env.NODE_VERSION }}
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pnpm exec playwright install --with-deps ${{ matrix.browser }}
      
      - name: Build application
        run: pnpm build
      
      - name: Run E2E tests
        run: pnpm test:e2e -- --project=${{ matrix.browser }}
      
      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-artifacts-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  # Job 4: Scientific Validation
  scientific-validation:
    name: Scientific Validation Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache scientific data
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/airimpute/
            test-data/
          key: ${{ runner.os }}-scientific-data-v1
      
      - name: Install scientific dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install jupyter nbconvert
      
      - name: Download validation datasets
        run: |
          python scripts/tests/download_validation_data.py
      
      - name: Run numerical validation tests
        run: |
          cd scripts
          pytest tests/test_numerical_validation.py -v --tb=short
      
      - name: Run statistical validation tests
        run: |
          cd scripts
          pytest tests/test_statistical_validation.py -v --tb=short
      
      - name: Run benchmark comparisons
        run: |
          cd scripts
          python tests/run_benchmark_validation.py --output=validation-report.json
      
      - name: Generate validation report
        run: |
          cd scripts
          jupyter nbconvert --to html validation/validation_report.ipynb
      
      - name: Upload validation results
        uses: actions/upload-artifact@v3
        with:
          name: scientific-validation
          path: |
            scripts/validation-report.json
            scripts/validation/validation_report.html

  # Job 5: Performance Benchmarks
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup environment
        uses: ./.github/actions/setup-test-env
        with:
          os: ubuntu-latest
          node-version: ${{ env.NODE_VERSION }}
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pip install -r requirements-dev.txt
          cd src-tauri && cargo build --release
      
      - name: Run Rust benchmarks
        run: |
          cd src-tauri
          cargo bench -- --output-format bencher | tee output.txt
          cargo install cargo-criterion
          cargo criterion --message-format json > criterion-report.json
      
      - name: Run Python benchmarks
        run: |
          cd scripts
          pytest tests/benchmarks/ --benchmark-only --benchmark-json=benchmark-report.json
      
      - name: Run frontend performance tests
        run: |
          pnpm build
          pnpm test:performance
      
      - name: Analyze benchmark results
        run: |
          python .github/scripts/analyze_benchmarks.py \
            --rust src-tauri/criterion-report.json \
            --python scripts/benchmark-report.json \
            --output performance-report.md
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Job 6: Build and Package
  build-package:
    name: Build - ${{ matrix.os }}
    needs: [quality-check, test-suite]
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup build environment
        uses: ./.github/actions/setup-build-env
        with:
          os: ${{ matrix.os }}
          node-version: ${{ env.NODE_VERSION }}
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile
          pip install -r requirements-exact.txt
      
      - name: Build frontend
        run: pnpm build
      
      - name: Build Tauri application
        run: pnpm tauri build
      
      - name: Sign application (macOS)
        if: matrix.os == 'macos-latest' && github.event_name == 'push'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        run: |
          .github/scripts/sign-macos.sh
      
      - name: Sign application (Windows)
        if: matrix.os == 'windows-latest' && github.event_name == 'push'
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          .github/scripts/sign-windows.ps1
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: airimpute-pro-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/

  # Job 7: Documentation Generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup environment
        uses: ./.github/actions/setup-test-env
        with:
          os: ubuntu-latest
          node-version: ${{ env.NODE_VERSION }}
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install documentation tools
        run: |
          pnpm install --frozen-lockfile
          pip install -r requirements-dev.txt
          pip install sphinx sphinx-rtd-theme autodoc
          cargo install mdbook mdbook-mermaid
      
      - name: Build API documentation
        run: |
          # TypeScript/React docs
          pnpm run docs:api
          
          # Rust docs
          cd src-tauri
          cargo doc --no-deps --document-private-items
          
          # Python docs
          cd ../scripts
          sphinx-build -b html docs docs/_build/html
      
      - name: Build user guide
        run: |
          cd docs
          mdbook build
      
      - name: Generate coverage report
        run: |
          .github/scripts/generate-coverage-report.sh
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/book

  # Job 8: Release
  release:
    name: Create Release
    needs: [build-package, e2e-tests, scientific-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate changelog
        run: |
          npm install -g conventional-changelog-cli
          conventional-changelog -p angular -i CHANGELOG.md -s
      
      - name: Create release notes
        run: |
          python .github/scripts/generate_release_notes.py \
            --changelog CHANGELOG.md \
            --validation scientific-validation/validation-report.json \
            --output RELEASE_NOTES.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body_path: RELEASE_NOTES.md
          draft: true
          prerelease: false
          files: |
            airimpute-pro-*/**/*

  # Job 9: Reproducibility Archive
  reproducibility-archive:
    name: Create Reproducibility Archive
    needs: [scientific-validation, build-package]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          pip install -r requirements-dev.txt
          pnpm install --frozen-lockfile
      
      - name: Generate reproducibility certificate
        run: |
          python scripts/generate_reproducibility_cert.py \
            --output reproducibility-cert.json
      
      - name: Create Docker image
        run: |
          docker build -t airimpute-pro:${{ github.sha }} .
          docker save airimpute-pro:${{ github.sha }} | gzip > airimpute-pro-docker.tar.gz
      
      - name: Create reproducibility package
        run: |
          mkdir -p reproducibility-package
          cp -r scripts reproducibility-package/
          cp -r test-data reproducibility-package/
          cp reproducibility-cert.json reproducibility-package/
          cp requirements-exact.txt reproducibility-package/
          cp Cargo.lock reproducibility-package/
          tar -czf reproducibility-package.tar.gz reproducibility-package/
      
      - name: Upload to Zenodo
        if: github.ref == 'refs/heads/main'
        env:
          ZENODO_TOKEN: ${{ secrets.ZENODO_TOKEN }}
        run: |
          python .github/scripts/upload_to_zenodo.py \
            --file reproducibility-package.tar.gz \
            --metadata reproducibility-cert.json

  # Job 10: Notification
  notify:
    name: Send Notifications
    needs: [release]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Send Slack notification
        if: env.SLACK_WEBHOOK != ''
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"CI/CD Pipeline completed for ${{ github.repository }} - ${{ github.ref }}"}' \
            $SLACK_WEBHOOK
      
      - name: Send email notification
        if: failure() && github.ref == 'refs/heads/main'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: CI/CD Pipeline Failed - AirImpute Pro
          to: ${{ secrets.EMAIL_RECIPIENTS }}
          from: AirImpute CI/CD
          body: |
            The CI/CD pipeline has failed for commit ${{ github.sha }}.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.event.head_commit.message }}
            
            Please check the GitHub Actions logs for details.