name: Windows Integration Tests

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_ENV: test
  FORCE_COLOR: 1
  RUST_BACKTRACE: 1

jobs:
  integration-test-windows:
    name: Integration Tests on Windows
    runs-on: windows-latest
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Configure git
      run: |
        git config --global core.autocrlf false
        git config --global core.longpaths true
        
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Setup Python (for node-gyp)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          src-tauri/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install Visual Studio Build Tools
      run: |
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --passive" -y
        
    - name: Configure npm for Windows
      run: |
        npm config set msvs_version 2022
        npm config set python python3
        
    - name: Clean install dependencies
      run: |
        if (Test-Path node_modules) { Remove-Item node_modules -Recurse -Force }
        npm cache clean --force
        npm ci --prefer-offline --no-audit --no-fund
      shell: powershell
        
    - name: Build Tauri dependencies
      run: |
        cd src-tauri
        cargo build --release --features "custom-protocol"
        cd ..
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        
    - name: Run integration tests
      run: |
        npm run test:integration:windows
      env:
        NODE_OPTIONS: --max-old-space-size=8192
        VITEST_SEGFAULT_RETRY: 3
        CI: true
        
    - name: Generate test report
      if: always()
      run: |
        if (Test-Path test-results) {
          echo "## Integration Test Results - Windows Node ${{ matrix.node-version }}" >> $env:GITHUB_STEP_SUMMARY
          echo "" >> $env:GITHUB_STEP_SUMMARY
          
          if (Test-Path test-results/integration-results.json) {
            $results = Get-Content test-results/integration-results.json | ConvertFrom-Json
            echo "| Metric | Value |" >> $env:GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $env:GITHUB_STEP_SUMMARY
            echo "| Total Tests | $($results.numTotalTests) |" >> $env:GITHUB_STEP_SUMMARY
            echo "| Passed | $($results.numPassedTests) ✅ |" >> $env:GITHUB_STEP_SUMMARY
            echo "| Failed | $($results.numFailedTests) ❌ |" >> $env:GITHUB_STEP_SUMMARY
            echo "| Duration | $($results.duration)ms |" >> $env:GITHUB_STEP_SUMMARY
          }
        }
      shell: powershell
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: windows-integration-test-results-node-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
          
    - name: Upload test logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: windows-integration-test-logs-node-${{ matrix.node-version }}
        path: |
          npm-debug.log
          yarn-error.log
          src-tauri/target/debug/
          
    - name: Check for memory leaks
      if: success()
      run: |
        echo "Checking for potential memory leaks..."
        $processes = Get-Process | Where-Object { $_.ProcessName -like "*node*" -or $_.ProcessName -like "*tauri*" }
        $processes | ForEach-Object {
          if ($_.WorkingSet64 -gt 1GB) {
            Write-Warning "Process $($_.ProcessName) using excessive memory: $([math]::Round($_.WorkingSet64/1MB, 2)) MB"
          }
        }
      shell: powershell

  integration-test-summary:
    name: Integration Test Summary
    needs: integration-test-windows
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: windows-integration-test-results-*
        merge-multiple: true
        
    - name: Generate combined report
      run: |
        echo "# Windows Integration Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results by Node Version" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        for result in test-results/*.json; do
          if [ -f "$result" ]; then
            echo "### $(basename $result .json)" >> $GITHUB_STEP_SUMMARY
            cat "$result" | jq -r '. | "- Total: \(.numTotalTests)\n- Passed: \(.numPassedTests)\n- Failed: \(.numFailedTests)"' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🧪 Windows Integration Test Results\n\n';
          
          // Read test results
          const resultsDir = 'test-results';
          if (fs.existsSync(resultsDir)) {
            const files = fs.readdirSync(resultsDir);
            files.forEach(file => {
              if (file.endsWith('.json')) {
                const data = JSON.parse(fs.readFileSync(`${resultsDir}/${file}`, 'utf8'));
                const status = data.numFailedTests === 0 ? '✅' : '❌';
                comment += `${status} **${file}**: ${data.numPassedTests}/${data.numTotalTests} passed\n`;
              }
            });
          }
          
          // Find and update or create comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Windows Integration Test Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment,
            });
          }