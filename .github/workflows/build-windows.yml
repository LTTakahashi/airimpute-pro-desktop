name: Build Windows Native

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download Official Python Embeddable Package
        run: |
          # Skip setup-python and go directly to official embeddable package
          # Using 3.10.11 as 3.10.13 embeddable package is not available on Python.org
          $pythonVersion = "3.10.11"
          $pythonUrl = "https://www.python.org/ftp/python/${pythonVersion}/python-${pythonVersion}-embed-amd64.zip"
          
          Write-Host "=== Downloading Python $pythonVersion Embeddable Package ==="
          Write-Host "URL: $pythonUrl"
          
          # Download with proper error handling
          try {
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest -Uri $pythonUrl -OutFile "python-embed.zip" -UseBasicParsing
            Write-Host "✓ Download successful"
          } catch {
            Write-Error "Failed to download Python: $_"
            exit 1
          }
          
          # Verify download
          if (-not (Test-Path "python-embed.zip")) {
            Write-Error "Python download failed - file not found"
            exit 1
          }
          
          $fileSize = [math]::Round((Get-Item "python-embed.zip").Length / 1MB, 2)
          Write-Host "✓ Downloaded: ${fileSize}MB"
          
          # Extract Python
          Write-Host "`n=== Extracting Python ==="
          $pythonDir = "src-tauri\python"
          New-Item -Path $pythonDir -ItemType Directory -Force | Out-Null
          
          try {
            Add-Type -AssemblyName System.IO.Compression.FileSystem
            [System.IO.Compression.ZipFile]::ExtractToDirectory("$PWD\python-embed.zip", "$PWD\$pythonDir")
            Write-Host "✓ Extraction successful"
          } catch {
            Write-Error "Failed to extract Python: $_"
            exit 1
          }
          
          # Verify Python executable
          $pythonExe = "$pythonDir\python.exe"
          if (-not (Test-Path $pythonExe)) {
            Write-Error "Python executable not found at: $pythonExe"
            exit 1
          }
          
          # Test Python
          Write-Host "`n=== Testing Python ==="
          & $pythonExe --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Python executable test failed"
            exit 1
          }
          
          # Enable site packages (required for pip)
          Write-Host "`n=== Configuring Embedded Python ==="
          $pthFile = Get-ChildItem -Path $pythonDir -Filter "python*.pth" | Select-Object -First 1
          if ($pthFile) {
            $pthPath = $pthFile.FullName
            $content = Get-Content $pthPath
            $newContent = $content -replace '^#import site', 'import site'
            if ($content -ne $newContent) {
              Set-Content -Path $pthPath -Value $newContent
              Write-Host "✓ Enabled site packages in $($pthFile.Name)"
            }
          } else {
            Write-Warning "No .pth file found - site packages may not work correctly"
          }
          
          # Clean up
          Remove-Item "python-embed.zip" -Force
          Write-Host "`n✓ Python setup complete"
        shell: pwsh
      
      - name: Install pip and packages
        run: |
          $pythonExe = "src-tauri\python\python.exe"
          
          Write-Host "=== Installing pip ==="
          
          # Download get-pip.py
          try {
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile "get-pip.py" -UseBasicParsing
            Write-Host "✓ Downloaded get-pip.py"
          } catch {
            Write-Error "Failed to download get-pip.py: $_"
            exit 1
          }
          
          # Install pip
          & $pythonExe get-pip.py --no-warn-script-location
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install pip"
            exit 1
          }
          
          # Verify pip
          & $pythonExe -m pip --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "pip verification failed"
            exit 1
          }
          
          Write-Host "`n=== Installing Scientific Packages ==="
          
          # Install packages one by one with progress
          $packages = @(
            @{name="numpy"; version="1.26.4"},
            @{name="pandas"; version="2.2.0"},
            @{name="scikit-learn"; version="1.4.0"},
            @{name="scipy"; version="1.12.0"},
            @{name="pyarrow"; version="15.0.0"},
            @{name="joblib"; version="1.3.2"}
          )
          
          foreach ($pkg in $packages) {
            Write-Host "`nInstalling $($pkg.name)==$($pkg.version)..."
            & $pythonExe -m pip install "$($pkg.name)==$($pkg.version)" --no-warn-script-location
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to install $($pkg.name)"
              exit 1
            }
            Write-Host "✓ $($pkg.name) installed"
          }
          
          # Show installed packages
          Write-Host "`n=== Installed Packages ==="
          & $pythonExe -m pip list
          
          # Test imports
          Write-Host "`n=== Testing Package Imports ==="
          & $pythonExe -c "import numpy; print(f'✓ NumPy {numpy.__version__}')"
          & $pythonExe -c "import pandas; print(f'✓ Pandas {pandas.__version__}')"
          & $pythonExe -c "import sklearn; print(f'✓ Scikit-learn {sklearn.__version__}')"
          
          # Clean up
          Remove-Item "get-pip.py" -Force
          & $pythonExe -m pip cache purge
          
          Write-Host "`n✓ Package installation complete"
        shell: pwsh
      
      - name: Set PyO3 Environment
        run: |
          $pythonPath = "${{ github.workspace }}\src-tauri\python"
          $pythonExe = "$pythonPath\python.exe"
          
          Write-Host "=== Configuring PyO3 Environment ==="
          Write-Host "Python path: $pythonPath"
          Write-Host "Python exe: $pythonExe"
          
          # Set environment variables for subsequent steps
          echo "PYO3_PYTHON=$pythonExe" >> $env:GITHUB_ENV
          echo "PYTHONHOME=$pythonPath" >> $env:GITHUB_ENV
          echo "PYTHONPATH=$pythonPath" >> $env:GITHUB_ENV
          
          # Add to PATH
          echo "$pythonPath" >> $env:GITHUB_PATH
          echo "$pythonPath\Scripts" >> $env:GITHUB_PATH
          
          # Also set for current step
          $env:PYO3_PYTHON = $pythonExe
          $env:PYTHONHOME = $pythonPath
          $env:PATH = "$pythonPath;$pythonPath\Scripts;$env:PATH"
          
          # Verify environment
          Write-Host "`n=== Verifying Environment ==="
          Write-Host "PYO3_PYTHON: $env:PYO3_PYTHON"
          Write-Host "PYTHONHOME: $env:PYTHONHOME"
          
          # Test Python is accessible
          python --version
          python -c "import sys; print(f'Python home: {sys.prefix}')"
          
          Write-Host "`n✓ PyO3 environment configured"
        shell: pwsh
      
      - name: Build Tauri Application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      
      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ github.sha }}
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
          retention-days: 7
          if-no-files-found: warn
      
      - name: Build Summary
        if: always()
        run: |
          Write-Host "=== Build Summary ==="
          Write-Host "Status: ${{ job.status }}"
          Write-Host "Commit: ${{ github.sha }}"
          Write-Host "Python: 3.10.11 (Official Embeddable)"
          
          # Check build outputs
          $nsisPath = "src-tauri\target\release\bundle\nsis"
          $msiPath = "src-tauri\target\release\bundle\msi"
          
          if (Test-Path $nsisPath) {
            $exe = Get-ChildItem -Path $nsisPath -Filter "*.exe" -ErrorAction SilentlyContinue
            if ($exe) {
              Write-Host "NSIS Installer: $($exe.Name) ($([math]::Round($exe.Length/1MB, 2))MB)"
            }
          }
          
          if (Test-Path $msiPath) {
            $msi = Get-ChildItem -Path $msiPath -Filter "*.msi" -ErrorAction SilentlyContinue  
            if ($msi) {
              Write-Host "MSI Installer: $($msi.Name) ($([math]::Round($msi.Length/1MB, 2))MB)"
            }
          }
        shell: pwsh