name: Build Windows Native

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: Setup Python with Development Libraries
        run: |
          # We need the full Python installation with development libraries for PyO3
          # The embeddable package doesn't include python311.lib needed for linking
          
          $pythonVersion = "3.11.9"
          Write-Host "=== Setting up Python $pythonVersion with development libraries ==="
          
          # Install Python using Chocolatey (includes development files)
          Write-Host "Installing Python via Chocolatey..."
          choco install python311 --version=3.11.9 -y --force
          
          # Refresh environment
          refreshenv
          
          # Find Python installation with improved detection
          $pythonPath = $null
          $possiblePaths = @(
            "C:\Python311",
            "C:\Python311-64",
            "C:\hostedtoolcache\windows\Python\3.11.9\x64",
            "${env:ProgramFiles}\Python311",
            "${env:ProgramFiles(x86)}\Python311",
            "${env:ChocolateyInstall}\lib\python311\tools\python311"
          )
          
          foreach ($path in $possiblePaths) {
            if (Test-Path "$path\python.exe") {
              $pythonPath = $path
              Write-Host "✓ Found Python at: $pythonPath"
              break
            }
          }
          
          if (-not $pythonPath) {
            Write-Error "Python installation not found in any expected location"
            exit 1
          }
          
          Write-Host "Python path: $pythonPath"
          
          # Copy Python to src-tauri for embedding
          $pythonDir = "src-tauri\python"
          Write-Host "`n=== Copying Python to $pythonDir ==="
          
          # Clean up any existing Python directory
          if (Test-Path $pythonDir) {
            Write-Host "Removing existing Python directory..."
            Remove-Item -Path $pythonDir -Recurse -Force
          }
          
          # Copy Python installation
          New-Item -Path $pythonDir -ItemType Directory -Force | Out-Null
          Copy-Item -Path "$pythonPath\*" -Destination $pythonDir -Recurse -Force
          
          # Ensure python311.dll is in multiple locations for compatibility
          $pythonDll = "$pythonPath\python311.dll"
          if (Test-Path $pythonDll) {
            Write-Host "Copying python311.dll to multiple locations..."
            Copy-Item -Path $pythonDll -Destination "$pythonDir\python311.dll" -Force
            # Also copy to DLLs directory if it exists
            if (Test-Path "$pythonDir\DLLs") {
              Copy-Item -Path $pythonDll -Destination "$pythonDir\DLLs\python311.dll" -Force
            }
            Write-Host "✓ python311.dll copied to $pythonDir"
          } else {
            # Try to find python311.dll in Windows System directory
            $sysDll = "${env:WINDIR}\System32\python311.dll"
            if (Test-Path $sysDll) {
              Write-Host "Found python311.dll in System32, copying..."
              Copy-Item -Path $sysDll -Destination "$pythonDir\python311.dll" -Force
            } else {
              Write-Error "python311.dll not found at: $pythonDll or $sysDll"
              exit 1
            }
          }
          
          # Copy Visual C++ runtime DLLs if needed
          $vcDlls = @("vcruntime140.dll", "vcruntime140_1.dll", "msvcp140.dll")
          foreach ($dll in $vcDlls) {
            $sourceDll = "$pythonPath\$dll"
            if (Test-Path $sourceDll) {
              Copy-Item -Path $sourceDll -Destination "$pythonDir\$dll" -Force
              Write-Host "✓ Copied $dll"
            }
          }
          
          # Verify Python executable
          $pythonExe = "$pythonDir\python.exe"
          if (-not (Test-Path $pythonExe)) {
            Write-Error "Python executable not found at: $pythonExe"
            exit 1
          }
          
          # Verify python311.lib exists
          $pythonLib = "$pythonDir\libs\python311.lib"
          if (-not (Test-Path $pythonLib)) {
            Write-Error "python311.lib not found at: $pythonLib"
            Write-Host "Contents of libs directory:"
            Get-ChildItem -Path "$pythonDir\libs" -ErrorAction SilentlyContinue
            exit 1
          } else {
            Write-Host "✓ Found python311.lib"
          }
          
          # Test Python
          Write-Host "`n=== Testing Python ==="
          & $pythonExe --version
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Python executable test failed"
            exit 1
          }
          
          # Verify site-packages directory exists
          $sitePackages = "$pythonDir\Lib\site-packages"
          if (-not (Test-Path $sitePackages)) {
            New-Item -Path $sitePackages -ItemType Directory -Force | Out-Null
            Write-Host "✓ Created site-packages directory"
          }
          
          Write-Host "`n✓ Python setup complete with development libraries"
        shell: pwsh
      
      - name: Install pip and packages
        run: |
          $pythonExe = "src-tauri\python\python.exe"
          
          Write-Host "=== Installing pip ==="
          
          # Download get-pip.py
          try {
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-WebRequest -Uri "https://bootstrap.pypa.io/get-pip.py" -OutFile "get-pip.py" -UseBasicParsing
            Write-Host "✓ Downloaded get-pip.py"
          } catch {
            Write-Error "Failed to download get-pip.py: $_"
            exit 1
          }
          
          # Install pip with specific target to ensure it's in the right location
          $sitePackages = "src-tauri\python\Lib\site-packages"
          New-Item -Path $sitePackages -ItemType Directory -Force | Out-Null
          
          & $pythonExe get-pip.py --no-warn-script-location
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install pip"
            exit 1
          }
          
          
          # Verify pip with full path first to ensure it's installed
          $pipPath = "src-tauri\python\Scripts\pip.exe"
          if (Test-Path $pipPath) {
            Write-Host "✓ pip.exe found at: $pipPath"
            & $pipPath --version
          } else {
            Write-Host "pip.exe not found at expected location, trying python -m pip"
          }
          
          # Skip python -m pip verification and use pip.exe directly
          Write-Host "✓ Using pip.exe directly for package installation"
          
          Write-Host "`n=== Installing Scientific Packages ==="
          
          # Install packages one by one with progress using pip.exe directly
          $packages = @(
            @{name="numpy"; version="1.26.4"},
            @{name="pandas"; version="2.2.0"},
            @{name="scikit-learn"; version="1.4.0"},
            @{name="scipy"; version="1.12.0"},
            @{name="pyarrow"; version="15.0.0"},
            @{name="joblib"; version="1.3.2"}
          )
          
          foreach ($pkg in $packages) {
            Write-Host "`nInstalling $($pkg.name)==$($pkg.version)..."
            & $pipPath install "$($pkg.name)==$($pkg.version)" --no-warn-script-location
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Failed to install $($pkg.name)"
              exit 1
            }
            Write-Host "✓ $($pkg.name) installed"
          }
          
          # Show installed packages
          Write-Host "`n=== Installed Packages ==="
          & $pipPath list
          
          # Test imports
          Write-Host "`n=== Testing Package Imports ==="
          & $pythonExe -c "import numpy; print(f'✓ NumPy {numpy.__version__}')"
          & $pythonExe -c "import pandas; print(f'✓ Pandas {pandas.__version__}')"
          & $pythonExe -c "import sklearn; print(f'✓ Scikit-learn {sklearn.__version__}')"
          
          # Clean up
          Remove-Item "get-pip.py" -Force
          & $pipPath cache purge
          
          Write-Host "`n✓ Package installation complete"
        shell: pwsh
      
      - name: Set PyO3 Environment
        run: |
          $pythonPath = "${{ github.workspace }}\src-tauri\python"
          $pythonExe = "$pythonPath\python.exe"
          $pythonLibs = "$pythonPath\libs"
          
          Write-Host "=== Configuring PyO3 Environment ==="
          Write-Host "Python path: $pythonPath"
          Write-Host "Python exe: $pythonExe"
          Write-Host "Python libs: $pythonLibs"
          
          # Set environment variables for subsequent steps
          echo "PYO3_PYTHON=$pythonExe" >> $env:GITHUB_ENV
          echo "PYTHONHOME=$pythonPath" >> $env:GITHUB_ENV
          echo "PYTHONPATH=$pythonPath;$pythonPath\Lib\site-packages" >> $env:GITHUB_ENV
          
          # Critical: Set library path for linking
          echo "LIB=$pythonLibs;$pythonPath;$env:LIB" >> $env:GITHUB_ENV
          
          # Add to PATH
          echo "$pythonPath" >> $env:GITHUB_PATH
          echo "$pythonPath\Scripts" >> $env:GITHUB_PATH
          echo "$pythonPath\DLLs" >> $env:GITHUB_PATH
          
          # Also set for current step
          $env:PYO3_PYTHON = $pythonExe
          $env:PYTHONHOME = $pythonPath
          $env:LIB = "$pythonLibs;$pythonPath;$env:LIB"
          $env:PATH = "$pythonPath;$pythonPath\Scripts;$pythonPath\DLLs;$env:PATH"
          
          # Set additional PyO3 specific variables
          echo "PYO3_CROSS_PYTHON_VERSION=3.11" >> $env:GITHUB_ENV
          echo "PYO3_CROSS_LIB_DIR=$pythonPath" >> $env:GITHUB_ENV
          
          # Verify environment
          Write-Host "`n=== Verifying Environment ==="
          Write-Host "PYO3_PYTHON: $env:PYO3_PYTHON"
          Write-Host "PYTHONHOME: $env:PYTHONHOME"
          Write-Host "LIB includes: $pythonLibs"
          
          # Verify python311.lib is accessible
          if (Test-Path "$pythonLibs\python311.lib") {
            Write-Host "✓ python311.lib is accessible"
            # Also copy to root for some build systems
            Copy-Item -Path "$pythonLibs\python311.lib" -Destination "$pythonPath\python311.lib" -Force
          } else {
            Write-Error "python311.lib not found in $pythonLibs"
            exit 1
          }
          
          # Test Python is accessible
          & $pythonExe --version
          & $pythonExe -c "import sys; print(f'Python home: {sys.prefix}')"
          & $pythonExe -c "import sys; print(f'Python version: {sys.version}')"
          
          Write-Host "`n✓ PyO3 environment configured with library paths"
        shell: pwsh
      
      - name: Install Node.js dependencies
        run: |
          Write-Host "=== Installing Node.js dependencies ==="
          # Force install with optional dependencies for Windows
          npm ci --include=optional
          
          # Explicitly install the missing rollup dependency if needed
          if (-not (Test-Path "node_modules/@rollup/rollup-win32-x64-msvc")) {
            Write-Host "Installing missing rollup Windows module..."
            npm install @rollup/rollup-win32-x64-msvc --save-optional
          }
          
          # Explicitly install the missing Tauri CLI Windows module
          if (-not (Test-Path "node_modules/@tauri-apps/cli-win32-x64-msvc")) {
            Write-Host "Installing missing Tauri CLI Windows module..."
            npm install @tauri-apps/cli-win32-x64-msvc --save-optional
          }
          
          Write-Host "✓ Dependencies installed"
        shell: pwsh
      
      - name: Build Frontend
        run: |
          Write-Host "=== Building Frontend ==="
          npm run build:frontend
          Write-Host "✓ Frontend built"
        shell: pwsh
      
      - name: Verify Icons Exist
        run: |
          Write-Host "=== Verifying Icons ==="
          Write-Host "--- Listing src-tauri/icons directory ---"
          if (Test-Path "src-tauri/icons") {
            Get-ChildItem -Path "src-tauri/icons" | Format-Table Name, Length, LastWriteTime
            
            # Specifically check for icon.ico
            if (Test-Path "src-tauri/icons/icon.ico") {
              $ico = Get-Item "src-tauri/icons/icon.ico"
              Write-Host "✓ icon.ico exists: $($ico.Length) bytes"
            } else {
              Write-Error "❌ icon.ico NOT FOUND - This will cause build failure!"
            }
          } else {
            Write-Error "❌ Icons directory not found!"
          }
          Write-Host ""
        shell: pwsh
      
      - name: Clean Build Artifacts
        run: |
          Write-Host "=== Cleaning Build Artifacts ==="
          # Clean Rust target directory to ensure fresh build
          if (Test-Path "src-tauri/target") {
            Write-Host "Removing target directory..."
            Remove-Item -Path "src-tauri/target" -Recurse -Force
          }
          Write-Host "✓ Build artifacts cleaned"
        shell: pwsh
      
      - name: Pre-build Python DLL Copy
        run: |
          Write-Host "=== Pre-build Python DLL Copy ==="
          
          # Run the PowerShell script to copy DLLs
          & .\scripts\copy-python-dlls.ps1
          
          # Create target directories if they don't exist
          $targetDirs = @(
            "src-tauri\target\release",
            "src-tauri\target\debug"
          )
          
          foreach ($dir in $targetDirs) {
            if (-not (Test-Path $dir)) {
              New-Item -Path $dir -ItemType Directory -Force | Out-Null
              Write-Host "Created directory: $dir"
            }
          }
          
          # Copy python311.dll to expected locations
          $pythonDll = "src-tauri\python\python311.dll"
          if (Test-Path $pythonDll) {
            foreach ($dir in $targetDirs) {
              Copy-Item -Path $pythonDll -Destination $dir -Force
              Write-Host "✓ Copied python311.dll to $dir"
            }
          }
          
          Write-Host "✓ Pre-build DLL copy complete"
        shell: pwsh
      
      - name: Build Tauri Application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          # Ensure PyO3 environment is available
          PYO3_PYTHON: ${{ env.PYO3_PYTHON }}
          PYTHONHOME: ${{ env.PYTHONHOME }}
          PYTHONPATH: ${{ env.PYTHONPATH }}
          LIB: ${{ env.LIB }}
          PYO3_CROSS_PYTHON_VERSION: ${{ env.PYO3_CROSS_PYTHON_VERSION }}
          PYO3_CROSS_LIB_DIR: ${{ env.PYO3_CROSS_LIB_DIR }}
        with:
          # Configure tauri script to use our npm script
          tauriScript: npm run tauri
      
      - name: Upload Build Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ github.sha }}
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
          retention-days: 7
          if-no-files-found: warn
      
      - name: Build Summary
        if: always()
        run: |
          Write-Host "=== Build Summary ==="
          Write-Host "Status: ${{ job.status }}"
          Write-Host "Commit: ${{ github.sha }}"
          Write-Host "Python: 3.11.9 (Official Full)"
          
          # Check build outputs
          $nsisPath = "src-tauri\target\release\bundle\nsis"
          $msiPath = "src-tauri\target\release\bundle\msi"
          
          if (Test-Path $nsisPath) {
            $exe = Get-ChildItem -Path $nsisPath -Filter "*.exe" -ErrorAction SilentlyContinue
            if ($exe) {
              Write-Host "NSIS Installer: $($exe.Name) ($([math]::Round($exe.Length/1MB, 2))MB)"
            }
          }
          
          if (Test-Path $msiPath) {
            $msi = Get-ChildItem -Path $msiPath -Filter "*.msi" -ErrorAction SilentlyContinue  
            if ($msi) {
              Write-Host "MSI Installer: $($msi.Name) ($([math]::Round($msi.Length/1MB, 2))MB)"
            }
          }
        shell: pwsh