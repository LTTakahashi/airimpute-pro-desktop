# Windows Build Monitoring Workflow
# Monitors Windows build health and alerts on failures

name: Windows Build Monitor

on:
  workflow_run:
    workflows: ["Windows Build & Test"]
    types: [completed]
  schedule:
    # Weekly health check
    - cron: '0 9 * * 1'  # Every Monday at 9 AM UTC

jobs:
  alert-on-failure:
    name: Alert on Build Failure
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Analyze failure
        id: analyze
        run: |
          echo "Windows build failed!"
          echo "Workflow: ${{ github.event.workflow_run.name }}"
          echo "Run ID: ${{ github.event.workflow_run.id }}"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "failure_time=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT
          
      - name: Create issue for critical failure
        uses: actions/github-script@v7
        with:
          script: |
            const issueTitle = `üö® CRITICAL: Windows Build Failed - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = `
            ## Windows Build Failure Detected
            
            **Time:** ${{ steps.analyze.outputs.failure_time }}
            **Workflow Run:** [#${{ github.event.workflow_run.id }}](${{ github.event.workflow_run.html_url }})
            **Commit:** ${{ github.event.workflow_run.head_sha }}
            **Branch:** ${{ github.event.workflow_run.head_branch }}
            
            ### Immediate Actions Required:
            1. Check the [workflow logs](${{ github.event.workflow_run.html_url }})
            2. Identify the root cause
            3. Create a hotfix branch
            4. Fix the issue and verify locally
            5. Close this issue once resolved
            
            ### Common Windows Build Issues:
            - [ ] Native module compilation failure
            - [ ] Path length exceeded 260 characters
            - [ ] Missing Visual Studio Build Tools
            - [ ] Node.js version mismatch
            - [ ] Rust target not installed
            
            **Priority:** CRITICAL - All merges blocked until resolved
            
            cc: @airimpute-team
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['critical', 'windows-build', 'ci-failure']
            });

  weekly-health-check:
    name: Weekly Windows Build Health Check
    if: ${{ github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Analyze build history
        uses: actions/github-script@v7
        with:
          script: |
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            // Get Windows workflow runs from the past week
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'windows-build.yml',
              created: `>=${oneWeekAgo.toISOString()}`
            });
            
            const totalRuns = runs.data.workflow_runs.length;
            const successfulRuns = runs.data.workflow_runs.filter(run => run.conclusion === 'success').length;
            const failedRuns = runs.data.workflow_runs.filter(run => run.conclusion === 'failure').length;
            const cancelledRuns = runs.data.workflow_runs.filter(run => run.conclusion === 'cancelled').length;
            
            const successRate = totalRuns > 0 ? (successfulRuns / totalRuns * 100).toFixed(2) : 0;
            
            // Calculate average build time for successful runs
            const successfulRunTimes = runs.data.workflow_runs
              .filter(run => run.conclusion === 'success')
              .map(run => {
                const start = new Date(run.created_at);
                const end = new Date(run.updated_at);
                return (end - start) / 1000 / 60; // minutes
              });
            
            const avgBuildTime = successfulRunTimes.length > 0
              ? (successfulRunTimes.reduce((a, b) => a + b, 0) / successfulRunTimes.length).toFixed(2)
              : 'N/A';
            
            // Create or update health report issue
            const reportTitle = `üìä Windows Build Health Report - Week of ${new Date().toISOString().split('T')[0]}`;
            const reportBody = `
            ## Windows Build Health Metrics
            
            ### Summary (Past 7 Days)
            - **Total Runs:** ${totalRuns}
            - **Successful:** ${successfulRuns} ‚úÖ
            - **Failed:** ${failedRuns} ‚ùå
            - **Cancelled:** ${cancelledRuns} ‚ö†Ô∏è
            - **Success Rate:** ${successRate}% ${successRate < 95 ? '‚ö†Ô∏è Below target!' : '‚úÖ'}
            - **Average Build Time:** ${avgBuildTime} minutes
            
            ### Health Status
            ${successRate >= 95 ? '‚úÖ **HEALTHY**' : '‚ö†Ô∏è **NEEDS ATTENTION**'}
            
            ### KPI Targets
            - ‚úÖ Build Success Rate: ${successRate}% / 95% (target)
            - ${avgBuildTime !== 'N/A' && parseFloat(avgBuildTime) <= 10 ? '‚úÖ' : '‚ö†Ô∏è'} Average Build Time: ${avgBuildTime} / 10 minutes (target)
            - ${failedRuns <= totalRuns * 0.02 ? '‚úÖ' : '‚ö†Ô∏è'} Flaky Test Rate: ${totalRuns > 0 ? (failedRuns / totalRuns * 100).toFixed(2) : 0}% / 2% (target)
            
            ### Recent Failures
            ${failedRuns > 0 ? runs.data.workflow_runs
              .filter(run => run.conclusion === 'failure')
              .slice(0, 5)
              .map(run => `- [Run #${run.run_number}](${run.html_url}) - ${new Date(run.created_at).toLocaleString()}`)
              .join('\n') : 'No failures this week! üéâ'}
            
            ### Recommendations
            ${successRate < 95 ? '- Investigate and fix recurring failure patterns\n' : ''}
            ${avgBuildTime !== 'N/A' && parseFloat(avgBuildTime) > 10 ? '- Optimize build process to reduce build time\n' : ''}
            ${failedRuns > totalRuns * 0.02 ? '- Address flaky tests to improve reliability\n' : ''}
            ${successRate >= 95 && (avgBuildTime === 'N/A' || parseFloat(avgBuildTime) <= 10) ? '- Continue monitoring and maintaining current standards\n' : ''}
            
            ---
            *This report is automatically generated weekly. [View workflow configuration](.github/workflows/windows-monitor.yml)*
            `;
            
            // Search for existing report issue
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'windows-build-health',
              state: 'open',
              sort: 'created',
              direction: 'desc'
            });
            
            if (issues.data.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                title: reportTitle,
                body: reportBody
              });
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: reportTitle,
                body: reportBody,
                labels: ['windows-build-health', 'automated-report']
              });
            }

  update-status-badge:
    name: Update Status Badge
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Update README badge
        run: |
          echo "Windows build status badge would be updated here"
          # In a real implementation, this would update a status badge in README.md
          # or push status to a monitoring dashboard