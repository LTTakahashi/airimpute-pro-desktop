# Windows Build & Test Workflow
# Following CLAUDE.md specifications for Windows GitHub Actions

name: Windows Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: production
  FORCE_COLOR: 1
  RUST_BACKTRACE: full
  CARGO_TERM_COLOR: always

jobs:
  windows-build:
    name: Build on Windows
    runs-on: windows-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.x, 20.x]
        architecture: [x64]
        
    steps:
    - name: Configure git
      run: |
        git config --global core.autocrlf false
        git config --global core.longpaths true
        
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        architecture: ${{ matrix.architecture }}
        cache: 'npm'
        
    - name: Setup Python (for node-gyp)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: '1.75.0'
        targets: x86_64-pc-windows-msvc
        components: rustfmt, clippy
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: ${{ matrix.architecture }}
        
    - name: Install Visual Studio Build Tools
      run: |
        choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --passive"
        
    - name: Configure npm for Windows
      run: |
        npm config set msvs_version 2022
        npm config set python python3
        npm config set registry https://registry.npmjs.org/
        
    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
        cache-on-failure: true
        
    - name: Clean install dependencies
      run: |
        if (Test-Path node_modules) { Remove-Item node_modules -Recurse -Force }
        if (Test-Path package-lock.json) { Remove-Item package-lock.json -Force }
        npm cache clean --force
        npm install --no-audit --no-fund
        
    - name: Build frontend
      run: |
        npm run build:windows
      env:
        NODE_OPTIONS: --max-old-space-size=8192
        
    - name: Build Tauri application
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      run: |
        npm run tauri build -- --target x86_64-pc-windows-msvc
        
    - name: Run unit tests
      run: |
        npm run test:unit:windows -- --coverage --maxWorkers=2
      timeout-minutes: 10
      
    - name: Run Rust tests
      working-directory: ./src-tauri
      run: |
        cargo test --release --target x86_64-pc-windows-msvc -- --test-threads=2
      timeout-minutes: 15
      
    - name: List build artifacts
      if: success()
      run: |
        echo "=== MSI Files ==="
        Get-ChildItem -Path "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\msi\" -Filter "*.msi" | ForEach-Object { 
          Write-Host "$($_.Name) - Size: $([math]::Round($_.Length / 1MB, 2)) MB"
        }
        echo ""
        echo "=== EXE Files ==="
        Get-ChildItem -Path "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\nsis\" -Filter "*.exe" | ForEach-Object { 
          Write-Host "$($_.Name) - Size: $([math]::Round($_.Length / 1MB, 2)) MB"
        }
        
    - name: Verify build integrity
      run: |
        # Check if installers were created
        $msiCount = (Get-ChildItem -Path "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\msi\" -Filter "*.msi").Count
        $exeCount = (Get-ChildItem -Path "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\nsis\" -Filter "*.exe").Count
        
        if ($msiCount -eq 0 -and $exeCount -eq 0) {
          Write-Error "No installer files were created!"
          exit 1
        }
        
        # Verify file sizes are reasonable
        Get-ChildItem -Path "src-tauri\target\x86_64-pc-windows-msvc\release\bundle\" -Recurse -Include "*.msi","*.exe" | ForEach-Object {
          $sizeMB = [math]::Round($_.Length / 1MB, 2)
          if ($sizeMB -lt 10 -or $sizeMB -gt 500) {
            Write-Warning "Unexpected file size for $($_.Name): $sizeMB MB"
          }
        }
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: windows-test-results-${{ matrix.node-version }}
        path: |
          test-results-*.json
          coverage/
          
    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-${{ matrix.node-version }}
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
          src-tauri/target/x86_64-pc-windows-msvc/release/bundle/nsis/*.exe
        retention-days: 7
        
    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-logs-${{ matrix.node-version }}
        path: |
          src-tauri/target/x86_64-pc-windows-msvc/release/build/**/*.txt
          src-tauri/target/x86_64-pc-windows-msvc/release/build/**/*.log
          npm-debug.log
          yarn-error.log
        retention-days: 3

  windows-integration-test:
    name: Integration Tests on Windows
    needs: windows-build
    runs-on: windows-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        node-version: [18.x]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build-${{ matrix.node-version }}
          path: ./installers
          
      - name: Setup test environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install test dependencies
        run: |
          npm ci --production=false
          
      - name: Verify installer integrity
        run: |
          # List downloaded files
          Write-Host "Downloaded installers:"
          Get-ChildItem -Path "installers" -Recurse | ForEach-Object {
            Write-Host "  - $($_.FullName)"
          }
          
          # Check digital signatures if available
          Get-ChildItem -Path "installers" -Recurse -Include "*.msi","*.exe" | ForEach-Object {
            $sig = Get-AuthenticodeSignature -FilePath $_.FullName
            if ($sig.Status -eq "Valid") {
              Write-Host "✓ $($_.Name) is properly signed"
            } else {
              Write-Host "⚠ $($_.Name) signature status: $($sig.Status)"
            }
          }
          
      - name: Run smoke tests
        run: |
          # Basic functionality tests without full installation
          Write-Host "Running smoke tests..."
          # Add actual smoke test commands here
          
      - name: Check installer metadata
        run: |
          # Extract and verify MSI metadata
          Get-ChildItem -Path "installers" -Filter "*.msi" | ForEach-Object {
            Write-Host "`nMSI Info for: $($_.Name)"
            $windowsInstaller = New-Object -ComObject WindowsInstaller.Installer
            $database = $windowsInstaller.GetType().InvokeMember("OpenDatabase", "InvokeMethod", $null, $windowsInstaller, @($_.FullName, 0))
            
            $query = "SELECT Property, Value FROM Property WHERE Property IN ('ProductVersion', 'ProductName', 'Manufacturer')"
            $view = $database.GetType().InvokeMember("OpenView", "InvokeMethod", $null, $database, $query)
            $view.GetType().InvokeMember("Execute", "InvokeMethod", $null, $view, $null)
            
            $record = $view.GetType().InvokeMember("Fetch", "InvokeMethod", $null, $view, $null)
            while ($record -ne $null) {
              $property = $record.GetType().InvokeMember("StringData", "GetProperty", $null, $record, 1)
              $value = $record.GetType().InvokeMember("StringData", "GetProperty", $null, $record, 2)
              Write-Host "  $property = $value"
              $record = $view.GetType().InvokeMember("Fetch", "InvokeMethod", $null, $view, $null)
            }
            
            [System.Runtime.Interopservices.Marshal]::ReleaseComObject($windowsInstaller) | Out-Null
          }

  create-release:
    name: Create Release Assets
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [windows-build, windows-integration-test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all Windows builds
        uses: actions/download-artifact@v4
        with:
          pattern: windows-build-*
          path: ./release-assets
          merge-multiple: true
          
      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum *.msi *.exe > checksums-sha256.txt
          sha512sum *.msi *.exe > checksums-sha512.txt
          
      - name: Create release notes
        run: |
          echo "# Release Notes" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## Windows Builds" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Available Installers:" >> RELEASE_NOTES.md
          for file in release-assets/*.{msi,exe}; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              size=$(du -h "$file" | cut -f1)
              echo "- \`$filename\` ($size)" >> RELEASE_NOTES.md
            fi
          done
          echo "" >> RELEASE_NOTES.md
          echo "### Checksums" >> RELEASE_NOTES.md
          echo "\`\`\`" >> RELEASE_NOTES.md
          cat release-assets/checksums-sha256.txt >> RELEASE_NOTES.md
          echo "\`\`\`" >> RELEASE_NOTES.md
          
      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-assets
          path: |
            release-assets/*.msi
            release-assets/*.exe
            release-assets/checksums-*.txt
            RELEASE_NOTES.md
          retention-days: 30