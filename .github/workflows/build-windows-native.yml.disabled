name: Build Windows Executable (Native)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: false
        default: '1.0.0'

jobs:
  build-windows:
    name: Build Windows Executable
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.11'
          cache: 'pip'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-

      - name: Install Node dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
      
      - name: Download Python Windows embeddable package
        shell: powershell
        run: |
          $PYTHON_VERSION = "3.10.11"
          $PYTHON_EMBED_SHA256 = "608619f8619075629c9c69f361352a0da6ed7e62f83a0e19c63e0ea32eb7629d"
          
          # Download the embeddable package
          $url = "https://www.python.org/ftp/python/$PYTHON_VERSION/python-$PYTHON_VERSION-embed-amd64.zip"
          $output = "python-$PYTHON_VERSION-embed-amd64.zip"
          
          Write-Host "Downloading Python embeddable package..."
          Invoke-WebRequest -Uri $url -OutFile $output
          
          # Verify SHA256
          $hash = Get-FileHash -Path $output -Algorithm SHA256
          if ($hash.Hash -ne $PYTHON_EMBED_SHA256.ToUpper()) {
            Write-Error "SHA256 mismatch! Expected: $PYTHON_EMBED_SHA256, Got: $($hash.Hash)"
            exit 1
          }
          
          # Extract to python-embed-amd64 directory
          Write-Host "Extracting Python embeddable package..."
          New-Item -ItemType Directory -Force -Path "python-embed-amd64"
          Expand-Archive -Path $output -DestinationPath "python-embed-amd64" -Force
          
          # Set PYTHONHOME for PyO3 build
          echo "PYTHONHOME=$pwd\python-embed-amd64" >> $env:GITHUB_ENV

      - name: Build frontend
        run: npm run build

      - name: Build Tauri application
        env:
          # Conditionally set signing keys only if they exist
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY || '' }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD || '' }}
        run: |
          if ("${{ github.event.inputs.build_type }}" -eq "debug") {
            npm run tauri build -- --debug
          } else {
            npm run tauri build
          }
        shell: powershell

      - name: Create release info
        shell: powershell
        run: |
          $buildType = "${{ github.event.inputs.build_type }}"
          if ($buildType -eq "debug") {
            $buildDir = "src-tauri\target\debug\bundle"
          } else {
            $buildDir = "src-tauri\target\release\bundle"
          }
          
          # Find the NSIS installer
          $nsisInstaller = Get-ChildItem -Path "$buildDir\nsis\*.exe" -File | Select-Object -First 1
          $msiInstaller = Get-ChildItem -Path "$buildDir\msi\*.msi" -File -ErrorAction SilentlyContinue | Select-Object -First 1
          
          # Create dist directory
          New-Item -ItemType Directory -Force -Path "dist\windows"
          
          # Copy installers
          if ($nsisInstaller) {
            Copy-Item $nsisInstaller.FullName -Destination "dist\windows\AirImputePro-Setup.exe"
          }
          if ($msiInstaller) {
            Copy-Item $msiInstaller.FullName -Destination "dist\windows\AirImputePro.msi"
          }
          
          # Create build info
          @"
## Build Information
Version: ${{ github.event.inputs.version }}
Build Type: ${{ github.event.inputs.build_type }}
Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
Commit: ${{ github.sha }}
Rust Version: $(rustc --version)
Node Version: $(node --version)
Python Version: $(python --version)
"@ | Out-File -FilePath "dist\windows\build-info.txt" -Encoding UTF8

      - name: Generate checksums
        shell: powershell
        run: |
          cd dist\windows
          Get-ChildItem -Filter *.exe,*.msi | ForEach-Object {
            $hash = Get-FileHash -Path $_.Name -Algorithm SHA256
            "$($hash.Hash)  $($_.Name)" | Out-File -FilePath checksums.txt -Append -Encoding UTF8
          }
          cd ..\..
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ github.event.inputs.build_type }}-${{ github.event.inputs.version }}
          path: |
            dist/windows/*.exe
            dist/windows/*.msi
            dist/windows/checksums.txt
            dist/windows/build-info.txt
          retention-days: 30